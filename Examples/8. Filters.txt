        [MyAction]
        [MyAction]
        // [MyAction(Shortcircuit = true)]
        [MyAuthentication]
        [MyAuthorization]
        [HandleError]
        public IEnumerable<Card> Get()
        {
            Debug.Print("Get");
            //throw new DivideByZeroException();
            return _context.Cards.ToList();
        }


    class MyAuthenticationAttribute : Attribute, IAuthenticationFilter
    {
        public bool AllowMultiple { get; }

        public Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken)
        {
            Debug.Print("AuthenticateAsync");
            return Task.CompletedTask;
        }

        public Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken)
        {
            Debug.Print("ChallengeAsync");
            return Task.CompletedTask;
        }
    }

    class MyAuthorizationAttribute : AuthorizationFilterAttribute
    {
        public override void OnAuthorization(HttpActionContext actionContext)
        {
            Debug.Print("OnAuthorization");
        }
    }

    class MyActionAttribute : ActionFilterAttribute
    {
        public bool Shortcircuit { get; set; }

        public override void OnActionExecuted(HttpActionExecutedContext actionExecutedContext)
        {
            Debug.Print("OnActionExecuted");  
        }

        public override void OnActionExecuting(HttpActionContext actionContext)
        {
            Debug.Print("OnActionExecuting");
            if (Shortcircuit)
            {
                var response = actionContext.Request.CreateResponse(HttpStatusCode.OK);
                var stream = new FileStream(@"C:\Temp\Images\Finish him.jpg", FileMode.Open);
                response.Content = new StreamContent(stream);
                response.Content.Headers.ContentType = new MediaTypeHeaderValue("image/jpeg");
                actionContext.Response = response;
            }            
        }
    }

    class HandleErrorAttribute : ExceptionFilterAttribute
    {
        public override void OnException(HttpActionExecutedContext actionExecutedContext)
        {
            Debug.Print("OnException");
        }
    }